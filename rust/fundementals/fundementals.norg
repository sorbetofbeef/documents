@document.meta
  title: fundementals
  description: Rust basics
  author: me
  categories: rust
  created: 2021-10-26
  version: 0.1
@end

___
* Personal Rust Notes

___
 ** Misc Notes
- Semi-Colons - each line of rust code must end in a semi

___
 ** Data Types
  - Standard - bool, int, float/double, strings
  
  - Non-Standard
    - strings: wrapped in double quotes not single
    - char: characters are single alphanumerica and symbolic characters,
            denoted with single quotes

___
 ** Variables
  - Assign data to a temp memory location
  - Allows a programmer to easily work wit memory
  
  - rust_variables = snake_case
  
  - Can be set to any value and type 
  
  - Immutable by dfault but can be mutable
    - immutable: can not be mutated
    - mutable: can be mutated
  
  *** EXAMPLE 1
      ___
    > NOTE: Variable variations
    @code rust
      let two = 2; 
      let hello = "hello"; << double qoted string
      let j = 'j'; << single quoted character
      let my_half = 0.5; 
      let mut my_name = "Bill"; << "let mut" allows me to mutate this variable
      let quit_program = false;
      let your_half = my_half; << set variables equal to other variables
    @end

___
 ** Functions
  - Anatomy of a function - defining the fucntion
    fn - declares
    <name> - can not be a rust keyword or start with a number
    [(params: string, ...)] - strict typing; multiples are allowed
    [ -> return-type ] - declaure what type of data your function returns
    { body } -- all of the functionality you want to carry out
  
  - Using the functions - calling the function
    let x = - sets x to be equal to the returned value of the given function
    <fn_name>(paramA, paramB, ...) 
    - parameters, when called are known as arguments
    - make sure the argument order and the param order
      correspond with eachother

___
 ** Comments
  - Syntax = // inline /* block */
  
  - Purpose
    - should add something to the code
    - code should be written such that it speaks for itself
      renders comments unneeded in a lot of scenarios
    - other scenarios such attempts will fail
  
___
 ** Match
  - Adds logic to program 
  - Similar to if..else
  - Exhaustive
    - all options must be accounted for
  - Uses an _ to denote "everything else"

  *** EXAMPLES
      ___
    > NOTE: 

    @code rust
      fn main() {
        let some_bool = true;
        match some_bool {
          true => println!("true"),
          false => println!("false"),
        };
      }
    
      fn main() {
        let some_int = 3;
        match some_int {
          1 => println!("its 1"),
          2 => println!("its 1"),
          3 => println!("its 1"),
          4 => println!("its 1"),
          _ => println!("Something else"),
        };
       }
    @end

___
 ** Comparing match and else..if
  - Match will be check by the compiler
    - developer is notified when new possibilites are added
  - Else..if does not get checked
    - if a new possibility is added then your code could contain 
      a new bug as well
  - Match > Else..if with single variables
  - Match considers all possibilities
    - which equates to more robust code



